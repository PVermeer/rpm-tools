#!/bin/bash

set -e
set -o pipefail

script_name=$(basename "$0")
script_dir=$(dirname "$0")

source $script_dir/scripts/bash-color.sh
source $script_dir/scripts/utils.sh
source $script_dir/scripts/options.sh
source $script_dir/scripts/build.sh
source $script_dir/scripts/rpm-spec.sh
source $script_dir/scripts/submodules.sh
source $script_dir/scripts/copr.sh
source $script_dir/scripts/updater.sh

export RPM_LOCAL_BUILD="false"
export RPM_COPR_BUILD="false"
export RPM_SPEC_UPDATE="false"
export UPDATE_SELF="false"
export COPR_STATUS="null"
trap export_variables_to_tmp EXIT

# Script options
echo_color "\n=== Setting up options ==="

set_environment $@
set_arguments $@
print_options

# Required options
if [ "$build" = "false" ] && [ "$update" = "false" ] && [ "$copr_build" = "false" ] && [ "$copr_status" = "false" ] && [ "$update_self" = "false" ] && [ "$install_deps" = "false" ]; then
  fail_arg "Please provide a 'build / status / update' option"
fi

# Dependencies
echo_color "\n=== Checking dependencies ==="
check_dependencies
if [ "$install_deps" = "true" ]; then
  echo "Installing dependencies not implemented yet"
  exit 0
fi

if [ -z $spec_file ]; then
  fail_arg "No spec-file provided"
fi

# Update self
echo_color "\n=== Checking for updates ==="
if [ "$disable_self_update" = "true" ]; then
  echo "Updates are disabled"
else
  if update_self; then
    UPDATE_SELF="true"
    # Don't need to reload if only set to update and do nothing
    if [ "$update_self" = "false" ]; then
      echo_warning -e "\n========== LOADING UPDATE ==========\n"
      exec $script_dir/rpm-tool $@ --disable-self-update
      exit 0
    fi
  fi
fi

# === UPDATE RPM ===
if [ $update = "true" ]; then
  echo_color "\n=== Update RPM ==="

  update_spec_repos $spec_file

  if [ "$RPM_SPEC_UPDATE" = "true" ]; then
    echo_color "\nNew spec file:"
    cat $spec_file
  fi

  if [ $update_submodules = "true" ]; then
    echo_color "\nUpdating submodules"
    update_submodules
  fi

  if [ $apply_patches = "true" ]; then
    echo_color "\nApplying patches"
    apply_patches
  fi
fi

# === BUILD RPM ===
if [ $build = "true" ]; then
  echo_color "\n=== RPM build ==="
  build_rpm
fi

# === COPR ===
if [ $copr_build = "true" ]; then

  echo_color "\n=== COPR build ===\n"

  build_on_copr
  echo_color "Build triggered on COPR"

  if [ $copr_watch = "true" ]; then

    if [ -z $copr_owner ] || [ -z $copr_project ] || [ -z $copr_package ]; then
      fail_arg "Please provide all copr information for --copr-watch"
    fi

    copr_watch
  fi
fi

# === COPR Status ===
if [ $copr_status = "true" ]; then
  echo_color "\n=== COPR status ==="

  on_error() {
    echo_error "$build_state"
    build_state="null"
    COPR_STATUS="$build_state"
    exit 1
  }
  build_state=$(get_copr_status) || on_error
  COPR_STATUS="$build_state"

  echo -n "Copr build status: "
  if [ "$build_state" = "failed" ]; then
    echo_error "$build_state"
    exit 1
  else
    echo_success "$build_state"
    exit 0
  fi
fi
